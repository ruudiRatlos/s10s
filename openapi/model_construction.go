/*
SpaceTraders API

SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.

API version: 2.0.0
Contact: joel@spacetraders.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the Construction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Construction{}

// Construction The construction details of a waypoint.
type Construction struct {
	// The symbol of the waypoint.
	Symbol string `json:"symbol"`
	// The materials required to construct the waypoint.
	Materials []ConstructionMaterial `json:"materials"`
	// Whether the waypoint has been constructed.
	IsComplete           bool `json:"isComplete"`
	AdditionalProperties map[string]interface{}
}

type _Construction Construction

// NewConstruction instantiates a new Construction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConstruction(symbol string, materials []ConstructionMaterial, isComplete bool) *Construction {
	this := Construction{}
	this.Symbol = symbol
	this.Materials = materials
	this.IsComplete = isComplete
	return &this
}

// NewConstructionWithDefaults instantiates a new Construction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConstructionWithDefaults() *Construction {
	this := Construction{}
	return &this
}

// GetSymbol returns the Symbol field value
func (o *Construction) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *Construction) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *Construction) SetSymbol(v string) {
	o.Symbol = v
}

// GetMaterials returns the Materials field value
func (o *Construction) GetMaterials() []ConstructionMaterial {
	if o == nil {
		var ret []ConstructionMaterial
		return ret
	}

	return o.Materials
}

// GetMaterialsOk returns a tuple with the Materials field value
// and a boolean to check if the value has been set.
func (o *Construction) GetMaterialsOk() ([]ConstructionMaterial, bool) {
	if o == nil {
		return nil, false
	}
	return o.Materials, true
}

// SetMaterials sets field value
func (o *Construction) SetMaterials(v []ConstructionMaterial) {
	o.Materials = v
}

// GetIsComplete returns the IsComplete field value
func (o *Construction) GetIsComplete() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsComplete
}

// GetIsCompleteOk returns a tuple with the IsComplete field value
// and a boolean to check if the value has been set.
func (o *Construction) GetIsCompleteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsComplete, true
}

// SetIsComplete sets field value
func (o *Construction) SetIsComplete(v bool) {
	o.IsComplete = v
}

func (o Construction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Construction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["symbol"] = o.Symbol
	toSerialize["materials"] = o.Materials
	toSerialize["isComplete"] = o.IsComplete

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Construction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"symbol",
		"materials",
		"isComplete",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConstruction := _Construction{}

	err = json.Unmarshal(data, &varConstruction)

	if err != nil {
		return err
	}

	*o = Construction(varConstruction)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "materials")
		delete(additionalProperties, "isComplete")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConstruction struct {
	value *Construction
	isSet bool
}

func (v NullableConstruction) Get() *Construction {
	return v.value
}

func (v *NullableConstruction) Set(val *Construction) {
	v.value = val
	v.isSet = true
}

func (v NullableConstruction) IsSet() bool {
	return v.isSet
}

func (v *NullableConstruction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConstruction(val *Construction) *NullableConstruction {
	return &NullableConstruction{value: val, isSet: true}
}

func (v NullableConstruction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConstruction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
