/*
SpaceTraders API

SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.

API version: 2.0.0
Contact: joel@spacetraders.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RefuelShipRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RefuelShipRequest{}

// RefuelShipRequest struct for RefuelShipRequest
type RefuelShipRequest struct {
	// The amount of fuel to fill in the ship's tanks. When not specified, the ship will be refueled to its maximum fuel capacity. If the amount specified is greater than the ship's remaining capacity, the ship will only be refueled to its maximum fuel capacity. The amount specified is not in market units but in ship fuel units.
	Units *int32 `json:"units,omitempty"`
	// Wether to use the FUEL thats in your cargo or not. Default: false
	FromCargo            *bool `json:"fromCargo,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RefuelShipRequest RefuelShipRequest

// NewRefuelShipRequest instantiates a new RefuelShipRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefuelShipRequest() *RefuelShipRequest {
	this := RefuelShipRequest{}
	return &this
}

// NewRefuelShipRequestWithDefaults instantiates a new RefuelShipRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefuelShipRequestWithDefaults() *RefuelShipRequest {
	this := RefuelShipRequest{}
	return &this
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *RefuelShipRequest) GetUnits() int32 {
	if o == nil || IsNil(o.Units) {
		var ret int32
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefuelShipRequest) GetUnitsOk() (*int32, bool) {
	if o == nil || IsNil(o.Units) {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *RefuelShipRequest) HasUnits() bool {
	if o != nil && !IsNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given int32 and assigns it to the Units field.
func (o *RefuelShipRequest) SetUnits(v int32) {
	o.Units = &v
}

// GetFromCargo returns the FromCargo field value if set, zero value otherwise.
func (o *RefuelShipRequest) GetFromCargo() bool {
	if o == nil || IsNil(o.FromCargo) {
		var ret bool
		return ret
	}
	return *o.FromCargo
}

// GetFromCargoOk returns a tuple with the FromCargo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefuelShipRequest) GetFromCargoOk() (*bool, bool) {
	if o == nil || IsNil(o.FromCargo) {
		return nil, false
	}
	return o.FromCargo, true
}

// HasFromCargo returns a boolean if a field has been set.
func (o *RefuelShipRequest) HasFromCargo() bool {
	if o != nil && !IsNil(o.FromCargo) {
		return true
	}

	return false
}

// SetFromCargo gets a reference to the given bool and assigns it to the FromCargo field.
func (o *RefuelShipRequest) SetFromCargo(v bool) {
	o.FromCargo = &v
}

func (o RefuelShipRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefuelShipRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Units) {
		toSerialize["units"] = o.Units
	}
	if !IsNil(o.FromCargo) {
		toSerialize["fromCargo"] = o.FromCargo
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RefuelShipRequest) UnmarshalJSON(data []byte) (err error) {
	varRefuelShipRequest := _RefuelShipRequest{}

	err = json.Unmarshal(data, &varRefuelShipRequest)

	if err != nil {
		return err
	}

	*o = RefuelShipRequest(varRefuelShipRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "units")
		delete(additionalProperties, "fromCargo")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRefuelShipRequest struct {
	value *RefuelShipRequest
	isSet bool
}

func (v NullableRefuelShipRequest) Get() *RefuelShipRequest {
	return v.value
}

func (v *NullableRefuelShipRequest) Set(val *RefuelShipRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRefuelShipRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRefuelShipRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefuelShipRequest(val *RefuelShipRequest) *NullableRefuelShipRequest {
	return &NullableRefuelShipRequest{value: val, isSet: true}
}

func (v NullableRefuelShipRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefuelShipRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
