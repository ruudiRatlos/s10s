/*
SpaceTraders API

SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   

API version: 2.0.0
Contact: joel@spacetraders.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the System type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &System{}

// System struct for System
type System struct {
	// The symbol of the system.
	Symbol string `json:"symbol"`
	// The symbol of the sector.
	SectorSymbol string `json:"sectorSymbol"`
	Type SystemType `json:"type"`
	// Relative position of the system in the sector in the x axis.
	X int32 `json:"x"`
	// Relative position of the system in the sector in the y axis.
	Y int32 `json:"y"`
	// Waypoints in this system.
	Waypoints []SystemWaypoint `json:"waypoints"`
	// Factions that control this system.
	Factions []SystemFaction `json:"factions"`
	AdditionalProperties map[string]interface{}
}

type _System System

// NewSystem instantiates a new System object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystem(symbol string, sectorSymbol string, type_ SystemType, x int32, y int32, waypoints []SystemWaypoint, factions []SystemFaction) *System {
	this := System{}
	this.Symbol = symbol
	this.SectorSymbol = sectorSymbol
	this.Type = type_
	this.X = x
	this.Y = y
	this.Waypoints = waypoints
	this.Factions = factions
	return &this
}

// NewSystemWithDefaults instantiates a new System object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemWithDefaults() *System {
	this := System{}
	return &this
}

// GetSymbol returns the Symbol field value
func (o *System) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *System) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *System) SetSymbol(v string) {
	o.Symbol = v
}

// GetSectorSymbol returns the SectorSymbol field value
func (o *System) GetSectorSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SectorSymbol
}

// GetSectorSymbolOk returns a tuple with the SectorSymbol field value
// and a boolean to check if the value has been set.
func (o *System) GetSectorSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SectorSymbol, true
}

// SetSectorSymbol sets field value
func (o *System) SetSectorSymbol(v string) {
	o.SectorSymbol = v
}

// GetType returns the Type field value
func (o *System) GetType() SystemType {
	if o == nil {
		var ret SystemType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *System) GetTypeOk() (*SystemType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *System) SetType(v SystemType) {
	o.Type = v
}

// GetX returns the X field value
func (o *System) GetX() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.X
}

// GetXOk returns a tuple with the X field value
// and a boolean to check if the value has been set.
func (o *System) GetXOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X, true
}

// SetX sets field value
func (o *System) SetX(v int32) {
	o.X = v
}

// GetY returns the Y field value
func (o *System) GetY() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Y
}

// GetYOk returns a tuple with the Y field value
// and a boolean to check if the value has been set.
func (o *System) GetYOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y, true
}

// SetY sets field value
func (o *System) SetY(v int32) {
	o.Y = v
}

// GetWaypoints returns the Waypoints field value
func (o *System) GetWaypoints() []SystemWaypoint {
	if o == nil {
		var ret []SystemWaypoint
		return ret
	}

	return o.Waypoints
}

// GetWaypointsOk returns a tuple with the Waypoints field value
// and a boolean to check if the value has been set.
func (o *System) GetWaypointsOk() ([]SystemWaypoint, bool) {
	if o == nil {
		return nil, false
	}
	return o.Waypoints, true
}

// SetWaypoints sets field value
func (o *System) SetWaypoints(v []SystemWaypoint) {
	o.Waypoints = v
}

// GetFactions returns the Factions field value
func (o *System) GetFactions() []SystemFaction {
	if o == nil {
		var ret []SystemFaction
		return ret
	}

	return o.Factions
}

// GetFactionsOk returns a tuple with the Factions field value
// and a boolean to check if the value has been set.
func (o *System) GetFactionsOk() ([]SystemFaction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Factions, true
}

// SetFactions sets field value
func (o *System) SetFactions(v []SystemFaction) {
	o.Factions = v
}

func (o System) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o System) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["symbol"] = o.Symbol
	toSerialize["sectorSymbol"] = o.SectorSymbol
	toSerialize["type"] = o.Type
	toSerialize["x"] = o.X
	toSerialize["y"] = o.Y
	toSerialize["waypoints"] = o.Waypoints
	toSerialize["factions"] = o.Factions

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *System) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"symbol",
		"sectorSymbol",
		"type",
		"x",
		"y",
		"waypoints",
		"factions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSystem := _System{}

	err = json.Unmarshal(data, &varSystem)

	if err != nil {
		return err
	}

	*o = System(varSystem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "sectorSymbol")
		delete(additionalProperties, "type")
		delete(additionalProperties, "x")
		delete(additionalProperties, "y")
		delete(additionalProperties, "waypoints")
		delete(additionalProperties, "factions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSystem struct {
	value *System
	isSet bool
}

func (v NullableSystem) Get() *System {
	return v.value
}

func (v *NullableSystem) Set(val *System) {
	v.value = val
	v.isSet = true
}

func (v NullableSystem) IsSet() bool {
	return v.isSet
}

func (v *NullableSystem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystem(val *System) *NullableSystem {
	return &NullableSystem{value: val, isSet: true}
}

func (v NullableSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


