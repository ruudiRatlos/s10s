/*
SpaceTraders API

SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.

API version: 2.0.0
Contact: joel@spacetraders.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateChart201ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateChart201ResponseData{}

// CreateChart201ResponseData struct for CreateChart201ResponseData
type CreateChart201ResponseData struct {
	Chart                Chart    `json:"chart"`
	Waypoint             Waypoint `json:"waypoint"`
	AdditionalProperties map[string]interface{}
}

type _CreateChart201ResponseData CreateChart201ResponseData

// NewCreateChart201ResponseData instantiates a new CreateChart201ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateChart201ResponseData(chart Chart, waypoint Waypoint) *CreateChart201ResponseData {
	this := CreateChart201ResponseData{}
	this.Chart = chart
	this.Waypoint = waypoint
	return &this
}

// NewCreateChart201ResponseDataWithDefaults instantiates a new CreateChart201ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateChart201ResponseDataWithDefaults() *CreateChart201ResponseData {
	this := CreateChart201ResponseData{}
	return &this
}

// GetChart returns the Chart field value
func (o *CreateChart201ResponseData) GetChart() Chart {
	if o == nil {
		var ret Chart
		return ret
	}

	return o.Chart
}

// GetChartOk returns a tuple with the Chart field value
// and a boolean to check if the value has been set.
func (o *CreateChart201ResponseData) GetChartOk() (*Chart, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chart, true
}

// SetChart sets field value
func (o *CreateChart201ResponseData) SetChart(v Chart) {
	o.Chart = v
}

// GetWaypoint returns the Waypoint field value
func (o *CreateChart201ResponseData) GetWaypoint() Waypoint {
	if o == nil {
		var ret Waypoint
		return ret
	}

	return o.Waypoint
}

// GetWaypointOk returns a tuple with the Waypoint field value
// and a boolean to check if the value has been set.
func (o *CreateChart201ResponseData) GetWaypointOk() (*Waypoint, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Waypoint, true
}

// SetWaypoint sets field value
func (o *CreateChart201ResponseData) SetWaypoint(v Waypoint) {
	o.Waypoint = v
}

func (o CreateChart201ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateChart201ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chart"] = o.Chart
	toSerialize["waypoint"] = o.Waypoint

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateChart201ResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chart",
		"waypoint",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateChart201ResponseData := _CreateChart201ResponseData{}

	err = json.Unmarshal(data, &varCreateChart201ResponseData)

	if err != nil {
		return err
	}

	*o = CreateChart201ResponseData(varCreateChart201ResponseData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "chart")
		delete(additionalProperties, "waypoint")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateChart201ResponseData struct {
	value *CreateChart201ResponseData
	isSet bool
}

func (v NullableCreateChart201ResponseData) Get() *CreateChart201ResponseData {
	return v.value
}

func (v *NullableCreateChart201ResponseData) Set(val *CreateChart201ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateChart201ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateChart201ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateChart201ResponseData(val *CreateChart201ResponseData) *NullableCreateChart201ResponseData {
	return &NullableCreateChart201ResponseData{value: val, isSet: true}
}

func (v NullableCreateChart201ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateChart201ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
